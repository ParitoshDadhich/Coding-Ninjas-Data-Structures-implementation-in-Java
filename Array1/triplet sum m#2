import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static int[] takeInput() throws IOException {
        int size = Integer.parseInt(br.readLine().trim());
        int[] input = new int[size];

        if (size == 0) {
            return input;
        }
        
        String[] strNums; 
        strNums = br.readLine().split("\\s");
        

        for (int i = 0; i < size; ++i) {
            input[i] = Integer.parseInt(strNums[i]);
        }

        return input;
    }


    public static void main(String[] args) throws NumberFormatException, IOException {
        int t = Integer.parseInt(br.readLine().trim());

        while(t > 0) {

            int[] input = takeInput();
            int x = Integer.parseInt(br.readLine().trim());
            System.out.println(Solution.findTriplet(input, x));

            t -= 1;
        }
    }
}




import java.util.*;
public class Solution {	

	public static int tripletSum(int[] arr, int sum) {
        Arrays.sort(arr);
        int n = arr.length;
        int count = 0;
        for(int i=0; i<n; i++){
            int temp = sum - arr[i];
            // finding pairs of temp;
            count += findPair(arr, i+1, n-1, temp);
        }
        
        return count;
    }
    
    private static int findPair(int arr[], int sI, int eI, int key){
        int numPair = 0;
        while(sI < eI){
            if(arr[sI] + arr[eI] > key)
               eI--;
            else if(arr[sI] + arr[eI] < key)
                sI++;
            else{
                // if both elements are same;
                if(arr[sI] == arr[eI]){
                    int num = (eI - sI) + 1;
                    numPair += num*(num-1)/2;
                    return numPair;
                }
                
                int siEle = arr[sI];
                int eiEle = arr[eI];
                int tempSi = sI + 1;
                int tempEi = eI - 1;
                
                while(tempSi <= tempEi && arr[tempSi] == siEle)
                    tempSi++;
             
                while(tempSi <= tempEi && arr[tempEi] == eiEle)
                    tempEi--;
                
                int totalElementFromStart = tempSi - sI;
                int totalElementFromEnd = eI - tempEi;
                
                numPair += (totalElementFromEnd * totalElementFromStart);
                
                sI = tempSi;
                eI = tempEi;
                
            }
            
        }
           return numPair;
    }
    
}
