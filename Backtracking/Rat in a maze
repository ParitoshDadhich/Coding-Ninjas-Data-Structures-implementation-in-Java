import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int maze[][] = new int[n][n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				maze[i][j] = s.nextInt();
			}
		}
		System.out.println(Solution.ratInAMaze(maze));	
	}

}




public class Solution {

    static boolean flag = false;
	public static boolean helper(int maze[][], int path[][], int i, int j, int m, int n){
 		if(i == m -1 && j == n-1){
            path[i][j] = 1;
            return true;
        }
       
        int directions[][] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        
        
         for(int k=0; k<directions.length; k++){
             if( i >= 0 && i < m && j >= 0 && j < n){
          	    int x = directions[k][0] + i;
            	int y = directions[k][1] + j;
                
                if(x >=0 && y >=0 && x < m && y < n){
                    if(maze[i][j] == 1 && path[i][j] == 0 && maze[x][y] == 1 && path[x][y] == 0){
                        path[i][j] = 1;
                    	flag = helper(maze, path, x, y, m, n);
                    }
                }
                 path[i][j] = 0;
        	}  
         }
        
        return flag;
        
	}
    
	public static boolean ratInAMaze(int maze[][]){
 		int m = maze.length;
        int n = maze[0].length;
        int path[][] = new int[m][n];
        boolean flag = false;
        
        return helper(maze, path, 0, 0, m, n);
    }
    
}
