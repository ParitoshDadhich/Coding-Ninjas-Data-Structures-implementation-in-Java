import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static int[][] take2DInput() throws IOException {
        String[] strRowsCols = br.readLine().trim().split("\\s");
        int mRows = Integer.parseInt(strRowsCols[0]);
        int nCols = Integer.parseInt(strRowsCols[1]);

        if (mRows == 0) {
            return new int[0][0];
        }


        int[][] mat = new int[mRows][nCols];

        for (int row = 0; row < mRows; row++) {
            String[] strNums; 
            strNums = br.readLine().trim().split("\\s");
            
            for (int col = 0; col < nCols; col++) {
                mat[row][col] = Integer.parseInt(strNums[col]);
            }
        }

        return mat;
    }


    public static void main(String[] args) throws NumberFormatException, IOException {
        int[][] mat = take2DInput();
        System.out.println(Solution.minCostPath(mat));
    }
}





public class Solution{
    public static int minCostPath(int input[][]){
        int m = input.length;
        int n = input[0].length;
        int temp[][] = new int[m][n];
        
        return helper(input, 0, 0, temp);
    }
    
    private static int helper(int arr[][], int i, int j, int temp[][]){
        int m = arr.length;
        int n = arr[0].length;
        if(m-1 == i && n-1 == j){
            temp[i][j] = arr[i][j];
            return temp[i][j];
        }
        
        if(i >= m || j >= n)
            return Integer.MAX_VALUE;
        
        if(temp[i][j] != 0)
            return temp[i][j];
        
        int p1 = helper(arr, i, j+1, temp);
        int p2 = helper(arr, i+1, j+1, temp);
        int p3 = helper(arr, i+1, j, temp);
        
        temp[i][j] = arr[i][j] + Math.min(p1, Math.min(p2, p3));
        
		return temp[i][j];

    }
}
