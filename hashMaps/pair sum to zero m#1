import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static int[] takeInput() throws IOException {
        int size = Integer.parseInt(br.readLine().trim());
        int[] input = new int[size];

        if (size == 0) {
            return input;
        }
        
		String[] strNums;
		strNums = br.readLine().split("\\s");
		
        for (int i = 0; i < size; ++i) {
            input[i] = Integer.parseInt(strNums[i]);
        }

        return input;
    }

    public static void printArray(int[] arr) {
        for (int element : arr) {
            System.out.print(element + " ");
        }

        System.out.println();
    }

    public static void main(String[] args) throws NumberFormatException, IOException {


        int[] arr = takeInput();
        System.out.print(Solution.PairSum(arr,arr.length));


    }
}




public class Solution{
      public static int PairSum(int[] input, int size) {
          HashMap<Integer, Integer> map = new HashMap<>();
          int count = 0;
          for(int i: input){
              if(map.containsKey(i))
                  map.put(i, map.get(i) + 1);
              else
                  map.put(i, 1);
          }
          
          for(int i: input){
              if(map.containsKey(i) && map.get(i) > 0){
                  if(i == (-i)){
                      int occurence = map.get(i);
                      int totalOccurence = occurence*(occurence-1)/2;
                      for(int j=0; j<totalOccurence; j++)
                          //System.out.println(-i + " " + i);
                          count++;
                      
                      map.put(i, 0);
                      continue;
                  } else{ 
                      if( map.containsKey(-i) && map.get(i)>0 ){
                          int occurence = map.get(i)*map.get(-i);
                          for(int j=0; j<occurence; j++){
                              //System.out.println(Math.min(-i, i) + " " + Math.max(-i, i));
                              count++;
                          }
                          map.put(i, 0);
                          map.put(-i, 0);
                      }
                  }
              }
          }
          return count;
      }
}
